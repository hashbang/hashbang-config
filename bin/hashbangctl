#!/usr/bin/python

import os
import sys
import textwrap
import json
import requests
from ConfigParser import ConfigParser
from provisor import Provisor
from provisor.utils import getch, validate_pubkey, drop_privileges

SUDO_USER = os.environ.get('SUDO_USER')
CONF_FILE = '/etc/hashbangctl.conf'

if not SUDO_USER:
    exit("This script is designed to be run with sudo")

if not os.path.isfile(CONF_FILE):
    exit("%s does not exist" % CONF_FILE)

config = ConfigParser()
config.read([CONF_FILE])

p = Provisor(
    uri=config.get('ldap','uri'),
    user=config.get('ldap','user'),
    password=config.get('ldap','password'),
    user_base=config.get('ldap','user-base'),
    group_base=config.get('ldap','group-base')
)

drop_privileges()

ldap_user = p.get_user(SUDO_USER)

user = {
    'name': ldap_user.setdefault('cn',['Unknown'])[0],
    'login': ldap_user['uid'][0],
    'uid': ldap_user['uidNumber'][0],
    'shell': ldap_user['loginShell'][0],
    'host': ldap_user['host'][0],
    'email': ldap_user['mailRoutingAddress'][0],
    'pubkeys': ldap_user['sshPublicKey'],
}

menu_items = [
    ('n',"Change Name"),
    ('s',"Change Shell"),
    ('a',"Add SSH Public Key"),
    ('i',"Import github SSH Public Keys"),
    ('d',"Delete SSH Public Key"),
    ('S',"Save changes"),
    ('h',"Help"),
    ('q',"Quit\n"),
]

def print_actions():
    print("\nActions:\n")
    for key,desc in menu_items:
        print("  %s - %s" % (key,desc))

def main_menu():
    print("\nLDAP User Details:\n")
    print("  Login : %s" % user['login'])
    print("  UID   : %s" % user['uid'])
    print("  Host  : %s" % user['host'])
    print("  Name  : %s" % user['name'])
    print("  Email : %s" % user['email'])
    print("  Shell : %s" % user['shell'])
    print("  SSH Public Keys:")
    for key in user['pubkeys']:
        print(textwrap.fill(
            "%s. %s" % (user['pubkeys'].index(key),key),
            width=74,
            initial_indent='    ',
            subsequent_indent='       '
        ))
    print_actions()
    sys.stdout.write('> ')

def ldap_sync():
    p.modify_user(
        SUDO_USER,
        pubkeys = user['pubkeys'],
        shell = user['shell'],
        name = user['name'],
    )


def add_pubkey( pubkey ):
    valid_pubkey = False;
    try:
        validate_pubkey(pubkey)
        valid_pubkey = True
    except Exception, e:
        print("\nError: %s" % e)

    if pubkey in user['pubkeys']:
        print('\nPublic Key already exists.')

    elif valid_pubkey:
        user['pubkeys'].append(pubkey)
        print('\nPublic Keys updated.')


main_menu()

while True:

    key = getch()

    if key in [ key for k,v in menu_items ]:
        print("%s\n" % key)

    if ord(key) == 3: # <Ctrl+C>
        break;

    elif key == '\r': # <Enter>
        main_menu()

    elif key == 'h':
        print_actions()

    elif key == 'n':
        user['name'] = raw_input("Enter new name: ")
        print('\nName Updated.')
        print('\nPlease press [Enter] to continue')

    elif key == 's':
        shell = raw_input("Enter new shell, eg /bin/bash:")

    with open('/etc/shells') as shells_list:
        
        # the first line of /etc/shells is a comment, so ignore it
        if shell not in [line.rstrip('\n') for line in shells_list][1:]
            print('Error: \n"%s" is not an available shell' % shell)
        else:
            user['shell'] = shell
            print('\nShell Updated.')

        print('\nPlease press [Enter] to continue')

    elif key == 'a':
        pubkey = raw_input("Paste SSH Public Key to be added:\n")
        add_pubkey(pubkey)

        print('\nPlease press [Enter] to continue')

    elif key == 'i':
        github_user = raw_input("Enter github username to fetch keys from [%s]:\n"%user['login'])
        if github_user == '':
            github_user = user['login']
        result = requests.get("https://api.github.com/users/%s/keys" % github_user)
        try:
            keys = json.loads(result.content)
            for key in keys:
                add_pubkey(key['key'])
                pass
        except ValueError, e:
            print("\nError: got invalid json: %s", e)


        print('\nPlease press [Enter] to continue')

    elif key == 'd':
        if (len(user['pubkeys']) == 0):
            print('\nThere are no SSH Public Keys to delete')
        else:
            print('Press the number of the key you wish to delete')
            print('(Or Press ESC to Cancel)')
            sys.stdout.write('\n> ')
            delkey = getch()
            if ord(delkey) == 27: #Esc
                main_menu()
            elif ord(delkey) >= ord('0') and ord(delkey) <= ord(str(len(user['pubkeys']))):
                print(delkey)
                del user['pubkeys'][int(delkey)]
                print('\nKey Deleted: %s' % delkey)
            else:
                print('\nInvalid key number specified')

            print('\nPlease press [Enter] to continue')

    elif key == 'S':
        ldap_sync()
        print('Changes saved.\n')


    elif key == 'q':
        ldap_sync()
        break
